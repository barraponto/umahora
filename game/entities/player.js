define([
       'crafty',
       'game/entities/_base',
       'game/spriters/player'
], function(Crafty, BaseEntity, PlayerSpriter) {
  var Player = BaseEntity.extend({
    defaults: {
      spriter: new PlayerSpriter(),
      // Center player by default.
      x: Crafty.viewport.width / 2,
      y: Crafty.viewport.height / 2,
      w: 64,
      h: 64
    },
    initialize: function() {
      var model = this;
      // Mind that the last component is generated by the sprite.
      model.get('spriter').create();
      var entity = Crafty.e('player, DOM, 2D, Multiway, south');
      // Initializing entity components.
      entity.attr({
        x: model.get('x') - model.get('w'),
        y: model.get('y') - model.get('h'),
        w: model.get('w'),
        h: model.get('h')
      })
      // first arg is speed in pixels, second is dict of keys and directions in degrees (0 is right).
      .multiway(5, {W: -90, A: 180, S: 90, D: 0})
      .bind('NewDirection', _.bind(model.newDirection, model));

      model.set({'entity': entity});
    },
    look: function(sprite) {
      if (!this.get('entity').has(sprite)) {
        var spriter = this.get('spriter'),
        current = spriter.get('current'),
        elements = spriter.get('images')[current]['elements'];
        Object.keys(elements).some(function(e, i, a) {
          if (this.has(e)) {
            this.toggleComponent(e, sprite);
            return true;
          }
        }, this.get('entity'));
      }
    },
    newDirection: function(direction) {
      if (this.get('spriter') == undefined) {
        console.log('Error: Walker behavior requires a spriter.');
      } else if (direction.x > 0) {
        this.look('east');
      } else if (direction.x < 0) {
        this.look('west');
      } else if (direction.y > 0) {
        this.look('south');
      } else if (direction.y < 0) {
        this.look('north');
      }
    }
  });

  return Player;
});
